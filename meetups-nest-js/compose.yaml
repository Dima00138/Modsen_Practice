# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.9'

services:
  server:
    build:
      context: .
      target: dev
    command: npm run start:dev
    environment:
      NODE_ENV: development
    networks:
      - webnet
    ports:
      - 3000:3000
      - 9229:9229

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/app/src
  db:
    container_name: pg_db
    image: postgres
    networks:
      - webnet
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: meetups
      POSTGRES_PASSWORD: dima22138
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
networks:
  webnet:
volumes:
  db-data:

